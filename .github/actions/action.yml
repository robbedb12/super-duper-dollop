name: reusable deploy and backup action for iis directory
description: Demonstrate how to use reusable steps in a workflow

inputs:
    pathIISBaseFolder:
        description: "Input to the reusable workflow"
        required: true
    nameIISProjectFolder:
        description: "Name of the project folder name to deploy"
        required: true
    pathToBuildFolder:
        description: "Path to build folder inside the action runner"
        required: true

outputs:
    backup-and-deploy-output:
        description: "Output from the reusable workflow"
        value: ${{ steps.backup-and-deploy.outputs.deployFail}}

runs:
    using: "composite"
    steps:
        - name: Backup and deploy IIS Directory
          id: backup-and-deploy
          run: |
              $ErrorActionPreference = 'Stop'
              try{        
                $pathIISBaseFolder = "${{ inputs.pathIISBaseFolder }}"
                $nameIISProjectFolder = "${{ inputs.nameIISProjectFolder }}"
                $pathBuildFolder = "${{ inputs.pathToBuildFolder }}"



                $regexFolderCheck = "$nameIISProjectFolder-\d{4}-\d{2}-\d{2}( \((\d{0,2})\))?$"  

                $NewPath = "$pathIISBaseFolder\$nameIISProjectFolder"
                $BackupPath = "$newPath-$(Get-Date -Format "yyyy-MM-dd")"
                $directories = Get-ChildItem -Path $pathIISBaseFolder -Directory | Where-Object { $_.Name -match $regexFolderCheck }

                if ($directories.Count -gt 3) {
                    $directories | Sort-Object -Property LastWriteTime | Select-Object -First 1 | Remove-Item -Recurse
                }

                $directories = Get-ChildItem -Path $pathIISBaseFolder -Directory | Where-Object { $_.Name -match $regexFolderCheck }

                if (Test-Path $BackupPath) {

                    $duplicateItems = $directories | Where-Object { $_.FullName -match [regex]::Escape($BackupPath) + "(\s\(\d+\))?$" }
                    if ($duplicateItems) {
                        $measure = $duplicateItems | Measure-Object
                        for ($i = $($measure.Count - 1); $i -ge 0; $i--) {
                            if ($duplicateItems[$i].FullName -and $duplicateItems[$i].FullName -ne "$BackupPath ($($i + 1))") {
                                Rename-Item -Path $duplicateItems[$i].FullName -NewName "$BackupPath ($($i + 1))"
                            }
                        }
                    }
                }

                # Move the current folder to backup
                # test123
                if (Test-Path $NewPath ) {
                    Move-Item -Path $NewPath -Destination $BackupPath
                }

                New-Item -ItemType Directory -Path $NewPath
                Copy-Item -Recurse -Path "$pathBuildFolder\*" -Destination $NewPath
                if (Test-Path "web.config") {
                    Copy-Item "web.config" "$NewPath\web.config"
                }}
              catch{

                echo "deployfail=true">> $GITHUB_OUTPUT
              }

          shell: powershell
