name: Build and deploy on pull request test1234

on:
    pull_request:
        types:
            - closed
        branches:
            - main # Trigger the workflow on push to the deployment branch
    workflow_dispatch:
        inputs:
            version:
                description: "Commit hash (long) or tag to roll back to (leave empty for latest push). Check README for more info."
                required: false
                type: string

env:
    WORKING_DIRECTORY: ${{ vars.WORKING_DIRECTORY}}
    IIS_POOL_NAME: ${{secrets.IIS_POOL_NAME}}
    NAME_IIS_PROJECT_FOLDER: ${{vars.NAME_IIS_PROJECT_FOLDER}}
    PATH_IIS_BASE_FOLDER: ${{vars.PATH_IIS_BASE_FOLDER}}
jobs:
    # build:
    #     if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    #     defaults:
    #         run:
    #             working-directory: ${{vars.WORKING_DIRECTORY}} # Set the working directory for the test job
    #     runs-on: self-hosted

    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v4
    #           with:
    #               ref: ${{ github.event.inputs.version || 'main' }}
    #               fetch-depth: 0 # Fetch all history for all branches and tags

    #         - name: copy env
    #           run: |
    #               copy-item -path "C:\iisServer\angular\web\environment.ts" -destination "src\\environments\\environment.ts"
    #           shell: powershell

    #         - name: Install dependencies
    #           run: |
    #               pwd
    #               npm install
    #           shell: powershell

    #         - name: Build Angular app
    #           run: |
    #               echo "building app"
    #               npm run build

    deploy:
        # needs: build
        if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
        defaults:
            run:
                working-directory: ${{vars.WORKING_DIRECTORY}} # Set the working directory for the test job
        runs-on: self-hosted
        outputs:
            reusable_output: ${{ steps.process-step.outputs.step_output }}

        steps:
            - name: Stop IIS Site
              run: |
                  # Log the start of the process
                  echo "Stopping IIS server"

                  # Log the current user
                  $currentUser = whoami
                  echo "Current user: $currentUser"

                  # Define the application pool name
                  $appPoolName = "***"  # Replace with your actual application pool name

                  # Log the application pool name
                  echo "Attempting to stop application pool: $appPoolName"

                  try {
                      # Attempt to stop the application pool
                      Stop-WebAppPool -Name $appPoolName
                      echo "Application pool stopped successfully."
                  } catch {
                      # Log any errors that occur
                      echo "Error stopping application pool: $_"

                      # Check if the error is related to file permissions
                      if ($_.Exception -is [System.UnauthorizedAccessException]) {
                          echo "UnauthorizedAccessException: Check file permissions."

                          # Log the path of the problematic configuration file, if available
                          $errorDetails = $_.Exception.Message
                          echo "Error details: $errorDetails"

                          # Attempt to identify the configuration file path
                          if ($errorDetails -match "Bestandsnaam:\s*(.+)") {
                              $configFilePath = $matches[1]
                              echo "Problematic configuration file: $configFilePath"

                              # Check and log file permissions
                              $filePermissions = Get-Acl -Path $configFilePath
                              echo "File permissions for ${configFilePath}: $filePermissions"
                          } else {
                              echo "Configuration file path not found in error message."
                          }
                      }
                  }

              shell: powershell

            - name: Backup and deploy IIS Directory
              id: process-step
              uses: ./.github/actions
              with:
                  pathIISBaseFolder: "${{env.PATH_IIS_BASE_FOLDER}}"
                  nameIISProjectFolder: "${{env.NAME_IIS_PROJECT_FOLDER}}"
                  pathToBuildFolder: "${{env.WORKING_DIRECTORY}}\\dist\\script\\browser"

            - name: ensure succes
              if: steps.process-step.outputs.backup-and-deploy-output == 'true'
              run: |
                  if ((Get-IISSite -Name "${{env.IIS_POOL_NAME}}").state -ne "Started") {
                    Stop-WebAppPool "${{env.IIS_POOL_NAME}}"
                  }
                  exit 1
              shell: powershell

            - name: Start IIS Site
              run: |
                  echo "starting IIS server"
                  Stop-WebAppPool -Name "${{env.IIS_POOL_NAME}}"
              shell: powershell
